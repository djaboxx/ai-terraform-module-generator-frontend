/* tslint:disable */
/* eslint-disable */
/**
 * AI Terraform Module Generator
 * Generate Terraform modules using AI with Terraform Registry Protocol support
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListVersions200Response,
  SearchModules200Response,
  TerraformDiscovery200Response,
} from '../models/index';
import {
    ListVersions200ResponseFromJSON,
    ListVersions200ResponseToJSON,
    SearchModules200ResponseFromJSON,
    SearchModules200ResponseToJSON,
    TerraformDiscovery200ResponseFromJSON,
    TerraformDiscovery200ResponseToJSON,
} from '../models/index';

export interface DownloadModuleSourceRequest {
    namespace: string;
    name: string;
    provider: string;
    version: string;
}

export interface GetDownloadUrlRequest {
    namespace: string;
    name: string;
    provider: string;
    version: string;
}

export interface ListVersionsRequest {
    namespace: string;
    name: string;
    provider: string;
}

export interface SearchModulesRequest {
    query?: string;
    provider?: string;
    namespace?: string;
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Download the module source code
     */
    async downloadModuleSourceRaw(requestParameters: DownloadModuleSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling downloadModuleSource().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling downloadModuleSource().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling downloadModuleSource().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling downloadModuleSource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/modules/{namespace}/{name}/{provider}/{version}/source`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download the module source code
     */
    async downloadModuleSource(requestParameters: DownloadModuleSourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadModuleSourceRaw(requestParameters, initOverrides);
    }

    /**
     * Get download URL for a specific module version
     */
    async getDownloadUrlRaw(requestParameters: GetDownloadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling getDownloadUrl().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling getDownloadUrl().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling getDownloadUrl().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling getDownloadUrl().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/modules/{namespace}/{name}/{provider}/{version}/download`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get download URL for a specific module version
     */
    async getDownloadUrl(requestParameters: GetDownloadUrlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getDownloadUrlRaw(requestParameters, initOverrides);
    }

    /**
     * List available versions for a module
     */
    async listVersionsRaw(requestParameters: ListVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListVersions200Response>> {
        if (requestParameters['namespace'] == null) {
            throw new runtime.RequiredError(
                'namespace',
                'Required parameter "namespace" was null or undefined when calling listVersions().'
            );
        }

        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling listVersions().'
            );
        }

        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling listVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/modules/{namespace}/{name}/{provider}/versions`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters['namespace']))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters['name']))).replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVersions200ResponseFromJSON(jsonValue));
    }

    /**
     * List available versions for a module
     */
    async listVersions(requestParameters: ListVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListVersions200Response> {
        const response = await this.listVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for modules
     */
    async searchModulesRaw(requestParameters: SearchModulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchModules200Response>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['provider'] != null) {
            queryParameters['provider'] = requestParameters['provider'];
        }

        if (requestParameters['namespace'] != null) {
            queryParameters['namespace'] = requestParameters['namespace'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/modules/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchModules200ResponseFromJSON(jsonValue));
    }

    /**
     * Search for modules
     */
    async searchModules(requestParameters: SearchModulesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchModules200Response> {
        const response = await this.searchModulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registry discovery protocol endpoint
     */
    async terraformDiscoveryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerraformDiscovery200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/.well-known/terraform.json`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerraformDiscovery200ResponseFromJSON(jsonValue));
    }

    /**
     * Registry discovery protocol endpoint
     */
    async terraformDiscovery(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerraformDiscovery200Response> {
        const response = await this.terraformDiscoveryRaw(initOverrides);
        return await response.value();
    }

}
